{"version":3,"sources":["features/covid/covidSlice.ts","features/covid/Cards/Cards.tsx","features/covid/Chart/Chart.tsx","features/covid/PieChart/PieChart.tsx","features/covid/SwitchCountry/SwitchCountry.tsx","features/covid/DashBoard/DashBoard.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx","features/covid/Cards/Cards.module.css","features/covid/DashBoard/DashBoard.module.css","features/covid/Chart/Chart.module.css"],"names":["apiUrl","fetchAsyncGet","createAsyncThunk","a","axios","get","data","fetchAsyncGetDaily","fetchAsyncGetCountry","country","dynamicUrl","covidSlice","createSlice","name","initialState","dailyData","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","selectData","covid","selectDailyData","selectCountry","Cards","useSelector","className","styles","container","Grid","spacing","justifyContent","item","xs","md","component","Card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","confirmed","value","duration","separator","deaths","Chart","barChart","labels","datasets","backgroundColor","recovered","options","legend","display","title","text","lineChart","map","reportDate","total","label","borderColor","fill","length","PieChart","motality","pieChart","hoverBackgroundColor","position","boxWidth","align","toFixed","useStyles","makeStyles","theme","formControl","marginBottom","minWidth","SwitchCoutry","classes","dispatch","useDispatch","FormControl","NativeSelect","onChange","e","target","i","flexGrow","content","marginTop","DashBoard","useEffect","AppBar","Toolbar","Date","lastUpdate","toDateString","Container","App","store","configureStore","reducer","covidReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.df62b7a1.chunk.js","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { RootState } from \"../../app/store\";\nimport dataJson from \"./data.json\";\nimport dataJsonDaily from \"./dataDaily.json\";\n\nconst apiUrl = \"https://covid19.mathdro.id/api\";\n\ntype APIDATA =typeof dataJson;\ntype APIDATADAILY =typeof dataJsonDaily;\n\ntype covidState = {\n  data: APIDATA;\n  country: string;\n  dailyData: APIDATADAILY;\n};\n\nconst initialState:covidState = {\n  data:{\n    \"confirmed\": {\n    \"value\": 215357973,\n    \"detail\": \"https://covid19.mathdro.id/api/confirmed\"\n    },\n    \"recovered\": {\n    \"value\": 0,\n    \"detail\": \"https://covid19.mathdro.id/api/recovered\"\n    },\n    \"deaths\": {\n    \"value\": 4484434,\n    \"detail\": \"https://covid19.mathdro.id/api/deaths\"\n    },\n    \"dailySummary\": \"https://covid19.mathdro.id/api/daily\",\n    \"dailyTimeSeries\": {\n    \"pattern\": \"https://covid19.mathdro.id/api/daily/[dateString]\",\n    \"example\": \"https://covid19.mathdro.id/api/daily/2-14-2020\"\n    },\n    \"image\": \"https://covid19.mathdro.id/api/og\",\n    \"source\": \"https://github.com/mathdroid/covid19\",\n    \"countries\": \"https://covid19.mathdro.id/api/countries\",\n    \"countryDetail\": {\n    \"pattern\": \"https://covid19.mathdro.id/api/countries/[country]\",\n    \"example\": \"https://covid19.mathdro.id/api/countries/USA\"\n    },\n    \"lastUpdate\": \"2021-08-28T01:21:44.000Z\"\n    },\n  country:'',\n  dailyData:[\n    {\n      \"totalConfirmed\":557,\n      \"mainlandChina\":548,\n      \"otherLocations\":9,\n      \"deltaConfirmed\":0,\n      \"totalRecovered\":0,\n      \"confirmed\":{\n         \"total\":557,\n         \"china\":548,\n         \"outsideChina\":9\n      },\n      \"deltaConfirmedDetail\":{\n         \"total\":0,\n         \"china\":0,\n         \"outsideChina\":0\n      },\n      \"deaths\":{\n         \"total\":17,\n         \"china\":17,\n         \"outsideChina\":0\n      },\n      \"recovered\":{\n         \"total\":0,\n         \"china\":0,\n         \"outsideChina\":0\n      },\n      \"active\":0,\n      \"deltaRecovered\":0,\n      \"incidentRate\":0.4510818002025252,\n      \"peopleTested\":0,\n      \"reportDate\":\"2020-01-22\"\n   },\n  ],\n}\n\nexport const fetchAsyncGet = createAsyncThunk(\"covid/get\", async () => {\n  const { data } = await axios.get<APIDATA>(apiUrl);\n  return data;\n});\n\nexport const fetchAsyncGetDaily = createAsyncThunk(\n  \"covid/getDaily\",\n  async () => {\n    const { data } = await axios.get<APIDATADAILY>(`${apiUrl}/daily`);\n    return data;\n  }\n);\n\nexport const fetchAsyncGetCountry = createAsyncThunk(\n  \"covid/getCountry\",\n  async (country: string) => {\n    let dynamicUrl = apiUrl;\n    if (country) {\n      dynamicUrl = `${apiUrl}/countries/${country}`;\n    }\n    const { data } = await axios.get<APIDATA>(dynamicUrl);\n    return { data: data, country: country };\n  }\n);\n\n\nconst covidSlice = createSlice({\n  name:'covid',\n  initialState:initialState,\n  reducers:{},\n  extraReducers: (builder) => {\n    builder.addCase(fetchAsyncGet.fulfilled, (state, action) => {\n      return {\n        ...state,\n        data: action.payload,\n      };\n    });\n    builder.addCase(fetchAsyncGetDaily.fulfilled, (state, action) => {\n      return {\n        ...state,\n        dailyData: action.payload,\n      };\n    });\n    builder.addCase(fetchAsyncGetCountry.fulfilled, (state, action) => {\n      return {\n        ...state,\n        data: action.payload.data,\n        country: action.payload.country,\n      };\n    });\n  },\n});\n\nexport const selectData = (state: RootState) => state.covid.data;\nexport const selectDailyData = (state: RootState) => state.covid.dailyData;\nexport const selectCountry = (state: RootState) => state.covid.country;\n\nexport default covidSlice.reducer","import React from 'react'\nimport styles from \"./Cards.module.css\";\nimport CountUp from \"react-countup\";\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\n\nimport { GiHastyGrave } from \"react-icons/gi\";\nimport { MdLocalHospital } from \"react-icons/md\";\nimport { useSelector } from \"react-redux\";\nimport { selectData } from \"../covidSlice\";\n\nconst Cards:React.FC = () => {\n  const data = useSelector(selectData);\n  return (\n    <div className={styles.container}>\n      <Grid container spacing={1} justifyContent=\"center\">\n      <Grid item xs={12} md={3} component={Card} className={styles.infected}>\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              <MdLocalHospital />\n              感染者した人\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={data.confirmed.value}\n                duration={1.5}\n                separator=\",\"\n              />\n              {data.confirmed.value}\n            </Typography>\n          </CardContent>\n        </Grid>\n\n        {/* <Grid item xs={12} md={3} component={Card} className={styles.recovered}>\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              <AiFillLike /> 回復した人\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={data.recovered.value}\n                duration={1.5}\n                separator=\",\"\n              />\n            </Typography>\n          </CardContent>\n        </Grid> */}\n\n        <Grid item xs={12} md={3} component={Card} className={styles.deaths}>\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              <GiHastyGrave />\n              死んだ人\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={data.deaths.value}\n                duration={1.5}\n                separator=\",\"\n              />\n            </Typography>\n          </CardContent>\n        </Grid>\n      </Grid>\n    </div>\n  )\n}\n\nexport default Cards\n","import React from 'react'\nimport styles from \"./Chart.module.css\";\nimport { Line, Bar } from \"react-chartjs-2\";\n\nimport { useSelector } from \"react-redux\";\nimport { selectData, selectDailyData, selectCountry } from \"../covidSlice\";\n\nconst Chart:React.FC = () => {\n  const data = useSelector(selectData)\n  const dailyData = useSelector(selectDailyData)\n  const country = useSelector(selectCountry)\n\n\n  const barChart = data && (\n    <Bar\n      data={{\n        labels: [\"感染者した人\", \"回復した人\", \"死んだ人\"],\n        datasets: [\n          {\n            backgroundColor: [\n              \"rgba(0, 0, 255, 0.5)\",\n              \"#008080\",\n              \"rgba(255, 0, 0, 0.5)\",\n            ],\n            data: [\n              data.confirmed.value,\n              data.recovered.value,\n              data.deaths.value,\n            ],\n          },\n        ],\n      }}\n      options={{\n        legend: { display: false },\n        title: { display: true, text: `${country}の最新状況` },\n      }}\n    />\n  );\n\n\n  const lineChart = dailyData[0] && (\n    <Line\n      data={{\n        labels: dailyData.map(({ reportDate }) => reportDate),\n        datasets: [\n          {\n            data: dailyData.map((data) => data.confirmed.total),\n            label: \"Infected\",\n            borderColor: \"#3333ff\",\n            fill: true,\n          },\n          {\n            data: dailyData.map((data) => data.deaths.total),\n            label: \"Deaths\",\n            borderColor: \"#ff3370\",\n            fill: true,\n          },\n        ],\n      }}\n    />\n  );\n\n\n  return (\n    <div className={styles.container}>\n      {country.length ? barChart : lineChart}\n    </div>\n  );\n\n}\n\nexport default Chart\n","import React from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport { Doughnut } from \"react-chartjs-2\";\n\nimport { useSelector } from \"react-redux\";\nimport { selectData } from \"../covidSlice\";\n\nconst PieChart:React.FC = () => {\n  const data = useSelector(selectData)\n  const motality = data.confirmed && (100 * data.deaths.value) / data.confirmed.value;\n\n\n  const pieChart = data && (\n    <Doughnut\n      data={{\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n        datasets: [\n          {\n            data: [\n              data.confirmed.value,\n              data.recovered.value,\n              data.deaths.value,\n            ],\n            backgroundColor: [\n              \"rgba(0, 0, 255, 0.5)\",\n              \"#008080\",\n              \"rgba(255, 0, 0, 0.5)\",\n            ],\n            hoverBackgroundColor: [\"#36A2EB\", \"#3cb371\", \"#FF6384\"],\n            borderColor: [\"transparent\", \"transparent\", \"transparent\"],\n          },\n        ],\n      }}\n      options={{\n        legend: {\n          position: \"bottom\",\n          labels: {\n            boxWidth: 15,\n          },\n        },\n      }}\n    />\n  );\n\n\n  return (\n    <>\n    {data.confirmed && (\n      <Typography align=\"center\" color=\"textSecondary\" gutterBottom>\n        死亡率 {data.confirmed && motality.toFixed(2)} [%]\n      </Typography>\n    )}\n    {pieChart}\n  </>\n  )\n}\n\nexport default PieChart\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\n\nimport { useDispatch } from \"react-redux\";\nimport { fetchAsyncGetCountry } from \"../covidSlice\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    marginBottom: theme.spacing(3),\n    minWidth: 320,\n  },\n}));\n\nconst SwitchCoutry: React.FC = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const countries = [\n    \"japan\",\n    \"china\",\n    \"us\",\n    \"france\",\n    \"italy\",\n    \"spain\",\n    \"united kingdom\",\n    \"germany\",\n    \"russia\",\n    \"brazil\",\n    \"taiwan\",\n    \"thailand\",\n    \"new zealand\",\n    \"sweden\",\n    \"india\",\n  ];\n\n  return (\n    <FormControl className={classes.formControl}>\n      <NativeSelect\n        onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>\n          dispatch(fetchAsyncGetCountry(e.target.value))\n        }\n      >\n        <option value=\"\">Worldwide</option>\n        {countries.map((country, i) => (\n          <option key={i} value={country}>\n            {country}\n          </option>\n        ))}\n      </NativeSelect>\n    </FormControl>\n  );\n};\n\nexport default SwitchCoutry;","import React, { useEffect } from \"react\";\nimport styles from \"./DashBoard.module.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  Container,\n  Grid,\n} from \"@material-ui/core\";\n\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\n\nimport { fetchAsyncGet, fetchAsyncGetDaily, selectData } from \"../covidSlice\";\nimport Cards from \"../Cards/Cards\";\nimport Chart from \"../Chart/Chart\";\nimport PieChart from \"../PieChart/PieChart\";\nimport SwithCountry from \"../SwitchCountry/SwitchCountry\";\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    flexGrow: 1,\n  },\n  content: {\n    marginTop: 85,\n  },\n}));\n\nconst DashBoard:React.FC = () => {\n  const classes = useStyles()\n  const dispatch = useDispatch()\n\n  const data = useSelector(selectData);\n\n  useEffect(() => {\n    dispatch(fetchAsyncGet());\n    dispatch(fetchAsyncGetDaily());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <AppBar position=\"absolute\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n          新型コロナウイルス状況\n          </Typography>\n          {data && (\n            <Typography variant=\"body1\">\n              {new Date(data.lastUpdate).toDateString()}\n            </Typography>\n          )}\n        </Toolbar>\n      </AppBar>\n      \n      <Container className={classes.content}>\n        <div className={styles.container}>\n          <SwithCountry />\n        </div>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={7}>\n            <Chart />\n          </Grid>\n\n          <Grid item xs={12} md={5}>\n            <PieChart />\n          </Grid>\n\n          <Grid item xs={12} md={12}>\n            <Cards />\n          </Grid>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default DashBoard\n","import React from \"react\";\nimport \"./App.css\";\nimport DashBoard from \"./features/covid/DashBoard/DashBoard\";\n\nfunction App() {\n  return <DashBoard />;\n}\n\nexport default App;\n","import { Action, configureStore, ThunkAction } from '@reduxjs/toolkit';\nimport covidReducer from \"../features/covid/covidSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    covid: covidReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__4yP9m\",\"infected\":\"Cards_infected__32iNj\",\"recovered\":\"Cards_recovered__25amM\",\"deaths\":\"Cards_deaths__3ETzw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"DashBoard_container__bzz7u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__29GZd\"};"],"sourceRoot":""}